create type "public"."app_permission" as enum ('group.edit', 'group.delete', 'group.members.invite', 'group.members.approve');

create table "public"."group_roles" (
    "id" uuid not null default gen_random_uuid(),
    "group_id" uuid,
    "role_name" text,
    "description" text,
    "created_at" timestamp with time zone not null default now(),
    "created_by" uuid default auth.uid()
);


create table "public"."role_permissions" (
    "id" bigint generated by default as identity not null,
    "role_id" uuid not null,
    "permission" app_permission not null
);


create table "public"."user_roles" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "group_role_id" uuid not null,
    "user_id" uuid not null
);


alter table "public"."group" disable row level security;

CREATE UNIQUE INDEX group_roles_pkey ON public.group_roles USING btree (id);

CREATE UNIQUE INDEX role_permissions_pkey ON public.role_permissions USING btree (id);

CREATE UNIQUE INDEX role_permissions_role_permission_key ON public.role_permissions USING btree (role_id, permission);

CREATE UNIQUE INDEX user_roles_id_key ON public.user_roles USING btree (id);

CREATE UNIQUE INDEX user_roles_pkey ON public.user_roles USING btree (group_role_id, user_id);

alter table "public"."group_roles" add constraint "group_roles_pkey" PRIMARY KEY using index "group_roles_pkey";

alter table "public"."role_permissions" add constraint "role_permissions_pkey" PRIMARY KEY using index "role_permissions_pkey";

alter table "public"."user_roles" add constraint "user_roles_pkey" PRIMARY KEY using index "user_roles_pkey";

alter table "public"."group_roles" add constraint "public_group_roles_group_id_fkey" FOREIGN KEY (group_id) REFERENCES "group"(id) not valid;

alter table "public"."group_roles" validate constraint "public_group_roles_group_id_fkey";

alter table "public"."role_permissions" add constraint "public_role_permissions_role_id_fkey" FOREIGN KEY (role_id) REFERENCES group_roles(id) not valid;

alter table "public"."role_permissions" validate constraint "public_role_permissions_role_id_fkey";

alter table "public"."role_permissions" add constraint "role_permissions_role_permission_key" UNIQUE using index "role_permissions_role_permission_key";

alter table "public"."user_roles" add constraint "public_user_roles_group_role_id_fkey" FOREIGN KEY (group_role_id) REFERENCES group_roles(id) not valid;

alter table "public"."user_roles" validate constraint "public_user_roles_group_role_id_fkey";

alter table "public"."user_roles" add constraint "public_user_roles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."user_roles" validate constraint "public_user_roles_user_id_fkey";

alter table "public"."user_roles" add constraint "user_roles_id_key" UNIQUE using index "user_roles_id_key";

grant delete on table "public"."group_roles" to "anon";

grant insert on table "public"."group_roles" to "anon";

grant references on table "public"."group_roles" to "anon";

grant select on table "public"."group_roles" to "anon";

grant trigger on table "public"."group_roles" to "anon";

grant truncate on table "public"."group_roles" to "anon";

grant update on table "public"."group_roles" to "anon";

grant delete on table "public"."group_roles" to "authenticated";

grant insert on table "public"."group_roles" to "authenticated";

grant references on table "public"."group_roles" to "authenticated";

grant select on table "public"."group_roles" to "authenticated";

grant trigger on table "public"."group_roles" to "authenticated";

grant truncate on table "public"."group_roles" to "authenticated";

grant update on table "public"."group_roles" to "authenticated";

grant delete on table "public"."group_roles" to "service_role";

grant insert on table "public"."group_roles" to "service_role";

grant references on table "public"."group_roles" to "service_role";

grant select on table "public"."group_roles" to "service_role";

grant trigger on table "public"."group_roles" to "service_role";

grant truncate on table "public"."group_roles" to "service_role";

grant update on table "public"."group_roles" to "service_role";

grant delete on table "public"."role_permissions" to "anon";

grant insert on table "public"."role_permissions" to "anon";

grant references on table "public"."role_permissions" to "anon";

grant select on table "public"."role_permissions" to "anon";

grant trigger on table "public"."role_permissions" to "anon";

grant truncate on table "public"."role_permissions" to "anon";

grant update on table "public"."role_permissions" to "anon";

grant delete on table "public"."role_permissions" to "authenticated";

grant insert on table "public"."role_permissions" to "authenticated";

grant references on table "public"."role_permissions" to "authenticated";

grant select on table "public"."role_permissions" to "authenticated";

grant trigger on table "public"."role_permissions" to "authenticated";

grant truncate on table "public"."role_permissions" to "authenticated";

grant update on table "public"."role_permissions" to "authenticated";

grant delete on table "public"."role_permissions" to "service_role";

grant insert on table "public"."role_permissions" to "service_role";

grant references on table "public"."role_permissions" to "service_role";

grant select on table "public"."role_permissions" to "service_role";

grant trigger on table "public"."role_permissions" to "service_role";

grant truncate on table "public"."role_permissions" to "service_role";

grant update on table "public"."role_permissions" to "service_role";

grant delete on table "public"."user_roles" to "anon";

grant insert on table "public"."user_roles" to "anon";

grant references on table "public"."user_roles" to "anon";

grant select on table "public"."user_roles" to "anon";

grant trigger on table "public"."user_roles" to "anon";

grant truncate on table "public"."user_roles" to "anon";

grant update on table "public"."user_roles" to "anon";

grant delete on table "public"."user_roles" to "authenticated";

grant insert on table "public"."user_roles" to "authenticated";

grant references on table "public"."user_roles" to "authenticated";

grant select on table "public"."user_roles" to "authenticated";

grant trigger on table "public"."user_roles" to "authenticated";

grant truncate on table "public"."user_roles" to "authenticated";

grant update on table "public"."user_roles" to "authenticated";

grant delete on table "public"."user_roles" to "service_role";

grant insert on table "public"."user_roles" to "service_role";

grant references on table "public"."user_roles" to "service_role";

grant select on table "public"."user_roles" to "service_role";

grant trigger on table "public"."user_roles" to "service_role";

grant truncate on table "public"."user_roles" to "service_role";

grant update on table "public"."user_roles" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."group"
as permissive
for insert
to authenticated
with check (true);
