// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./database.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const applicationsRowSchema = z.object({
  approved_at: z.string().nullable(),
  created_at: z.string(),
  group_user_id: z.string(),
  id: z.string(),
  order_id: z.string().nullable(),
  rejected_at: z.string().nullable(),
  status: z.string(),
  tier_id: z.string(),
  type: z.string(),
  updated_at: z.string(),
});

export const applicationsInsertSchema = z.object({
  approved_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  group_user_id: z.string(),
  id: z.string().optional(),
  order_id: z.string().optional().nullable(),
  rejected_at: z.string().optional().nullable(),
  status: z.string().optional(),
  tier_id: z.string(),
  type: z.string().optional(),
  updated_at: z.string().optional(),
});

export const applicationsUpdateSchema = z.object({
  approved_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  group_user_id: z.string().optional(),
  id: z.string().optional(),
  order_id: z.string().optional().nullable(),
  rejected_at: z.string().optional().nullable(),
  status: z.string().optional(),
  tier_id: z.string().optional(),
  type: z.string().optional(),
  updated_at: z.string().optional(),
});

export const applicationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("applications_group_user_id_fkey"),
    columns: z.tuple([z.literal("group_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group_users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_order_id_fkey"),
    columns: z.tuple([z.literal("order_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("membership_applications_view"),
    referencedColumns: z.tuple([z.literal("order_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("applications_order_id_fkey"),
    columns: z.tuple([z.literal("order_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("orders"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const groupRowSchema = z.object({
  alternate_name: z.string().nullable(),
  created_at: z.string(),
  created_by: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  parent_id: z.string().nullable(),
  slug: z.string(),
  type: z.string().nullable(),
});

export const groupInsertSchema = z.object({
  alternate_name: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  parent_id: z.string().optional().nullable(),
  slug: z.string(),
  type: z.string().optional().nullable(),
});

export const groupUpdateSchema = z.object({
  alternate_name: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  parent_id: z.string().optional().nullable(),
  slug: z.string().optional(),
  type: z.string().optional().nullable(),
});

export const groupRelationshipsSchema = z.tuple([]);

export const groupRoleTypeSchema = z.union([
  z.literal("GUEST"),
  z.literal("MEMBER"),
]);

export const groupRolesInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  permissions: z.array(z.string()).optional().nullable(),
  role_name: z.string().optional().nullable(),
  type: groupRoleTypeSchema.optional().nullable(),
});

export const groupRolesUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  permissions: z.array(z.string()).optional().nullable(),
  role_name: z.string().optional().nullable(),
  type: groupRoleTypeSchema.optional().nullable(),
});

export const groupRolesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("group_roles_group_id_fkey"),
    columns: z.tuple([z.literal("group_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const groupUsersRowSchema = z.object({
  created_at: z.string(),
  group_id: z.string(),
  id: z.string(),
  is_active: z.boolean(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const groupUsersInsertSchema = z.object({
  created_at: z.string().optional(),
  group_id: z.string(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const groupUsersUpdateSchema = z.object({
  created_at: z.string().optional(),
  group_id: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const groupUsersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("group_users_group_id_fkey"),
    columns: z.tuple([z.literal("group_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("group_users_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const memberIdsRowSchema = z.object({
  created_at: z.string(),
  group_user_id: z.string(),
  id: z.string(),
  member_id: z.string(),
  updated_at: z.string(),
});

export const memberIdsInsertSchema = z.object({
  created_at: z.string().optional(),
  group_user_id: z.string(),
  id: z.string().optional(),
  member_id: z.string(),
  updated_at: z.string().optional(),
});

export const memberIdsUpdateSchema = z.object({
  created_at: z.string().optional(),
  group_user_id: z.string().optional(),
  id: z.string().optional(),
  member_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const memberIdsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("member_ids_group_user_id_fkey"),
    columns: z.tuple([z.literal("group_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group_users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const membershipTiersRowSchema = z.object({
  activation_type: z.string(),
  duration_months: z.number(),
  product_id: z.string(),
});

export const membershipTiersInsertSchema = z.object({
  activation_type: z.string(),
  duration_months: z.number().optional(),
  product_id: z.string(),
});

export const membershipTiersUpdateSchema = z.object({
  activation_type: z.string().optional(),
  duration_months: z.number().optional(),
  product_id: z.string().optional(),
});

export const membershipTiersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("membership_tiers_product_id_fkey"),
    columns: z.tuple([z.literal("product_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("products"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const membershipsRowSchema = z.object({
  end_date: z.string().nullable(),
  group_user_id: z.string(),
  order_id: z.string(),
  start_date: z.string().nullable(),
});

export const membershipsInsertSchema = z.object({
  end_date: z.string().optional().nullable(),
  group_user_id: z.string(),
  order_id: z.string(),
  start_date: z.string().optional().nullable(),
});

export const membershipsUpdateSchema = z.object({
  end_date: z.string().optional().nullable(),
  group_user_id: z.string().optional(),
  order_id: z.string().optional(),
  start_date: z.string().optional().nullable(),
});

export const membershipsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("memberships_group_user_id_fkey"),
    columns: z.tuple([z.literal("group_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group_users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("memberships_order_id_fkey"),
    columns: z.tuple([z.literal("order_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("membership_applications_view"),
    referencedColumns: z.tuple([z.literal("order_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("memberships_order_id_fkey"),
    columns: z.tuple([z.literal("order_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("orders"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const ordersRowSchema = z.object({
  amount: z.number(),
  completed_at: z.string().nullable(),
  created_at: z.string(),
  currency: z.string(),
  id: z.string(),
  product_id: z.string(),
  status: z.string(),
  type: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const ordersInsertSchema = z.object({
  amount: z.number(),
  completed_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  currency: z.string(),
  id: z.string().optional(),
  product_id: z.string(),
  status: z.string(),
  type: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const ordersUpdateSchema = z.object({
  amount: z.number().optional(),
  completed_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  product_id: z.string().optional(),
  status: z.string().optional(),
  type: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const ordersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("orders_product_id_fkey"),
    columns: z.tuple([z.literal("product_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("products"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const productsRowSchema = z.object({
  created_at: z.string(),
  currency: z.string(),
  description: z.string().nullable(),
  group_id: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean(),
  name: z.string(),
  price: z.number(),
  type: z.string(),
  updated_at: z.string(),
});

export const productsInsertSchema = z.object({
  created_at: z.string().optional(),
  currency: z.string().optional(),
  description: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  name: z.string(),
  price: z.number().optional(),
  type: z.string(),
  updated_at: z.string().optional(),
});

export const productsUpdateSchema = z.object({
  created_at: z.string().optional(),
  currency: z.string().optional(),
  description: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  name: z.string().optional(),
  price: z.number().optional(),
  type: z.string().optional(),
  updated_at: z.string().optional(),
});

export const productsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("products_group_id_fkey"),
    columns: z.tuple([z.literal("group_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const profilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  first_name: z.string().nullable(),
  id: z.string(),
  last_name: z.string().nullable(),
  updated_at: z.string().nullable(),
  username: z.string().nullable(),
});

export const profilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  first_name: z.string().optional().nullable(),
  id: z.string(),
  last_name: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const profilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  first_name: z.string().optional().nullable(),
  id: z.string().optional(),
  last_name: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const profilesRelationshipsSchema = z.tuple([]);

export const userRolesRowSchema = z.object({
  created_at: z.string(),
  group_role_id: z.string(),
  id: z.string(),
  is_active: z.boolean(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const userRolesInsertSchema = z.object({
  created_at: z.string().optional(),
  group_role_id: z.string(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const userRolesUpdateSchema = z.object({
  created_at: z.string().optional(),
  group_role_id: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const userRolesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_roles_group_role_id_fkey"),
    columns: z.tuple([z.literal("group_role_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group_roles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const membershipApplicationsViewRowSchema = z.object({
  activation_type: z.string().nullable(),
  amount: z.number().nullable(),
  application_id: z.string().nullable(),
  application_status: z.string().nullable(),
  approved_at: z.string().nullable(),
  currency: z.string().nullable(),
  duration_months: z.number().nullable(),
  end_date: z.string().nullable(),
  group_id: z.string().nullable(),
  group_user_id: z.string().nullable(),
  order_id: z.string().nullable(),
  order_status: z.string().nullable(),
  payment_completed_at: z.string().nullable(),
  product_currency: z.string().nullable(),
  product_description: z.string().nullable(),
  product_id: z.string().nullable(),
  product_name: z.string().nullable(),
  product_price: z.number().nullable(),
  rejected_at: z.string().nullable(),
  start_date: z.string().nullable(),
  submitted_at: z.string().nullable(),
  type: z.string().nullable(),
  updated_at: z.string().nullable(),
  user_data: jsonSchema.nullable(),
  user_id: z.string().nullable(),
});

export const membershipApplicationsViewRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("applications_group_user_id_fkey"),
    columns: z.tuple([z.literal("group_user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group_users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("group_users_group_id_fkey"),
    columns: z.tuple([z.literal("group_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("group_users_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const appPermissionSchema = z.union([
  z.literal("group.edit"),
  z.literal("group.delete"),
  z.literal("group.members.invite"),
  z.literal("group.members.approve"),
]);

export const membershipActivationTypeSchema = z.union([
  z.literal("automatic"),
  z.literal("review_required"),
  z.literal("payment_required"),
  z.literal("review_then_payment"),
]);

export const groupRolesRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string().nullable(),
  description: z.string().nullable(),
  group_id: z.string().nullable(),
  id: z.string(),
  permissions: z.array(z.string()).nullable(),
  role_name: z.string().nullable(),
  type: groupRoleTypeSchema.nullable(),
});
