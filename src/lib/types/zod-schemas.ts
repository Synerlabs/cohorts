// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./database.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const groupRowSchema = z.object({
  alternate_name: z.string().nullable(),
  created_at: z.string(),
  created_by: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  parent_id: z.string().nullable(),
  slug: z.string(),
  type: z.string().nullable(),
});

export const groupInsertSchema = z.object({
  alternate_name: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  parent_id: z.string().optional().nullable(),
  slug: z.string(),
  type: z.string().optional().nullable(),
});

export const groupUpdateSchema = z.object({
  alternate_name: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  parent_id: z.string().optional().nullable(),
  slug: z.string().optional(),
  type: z.string().optional().nullable(),
});

export const groupRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_group_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const groupRolesRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string().nullable(),
  description: z.string().nullable(),
  group_id: z.string().nullable(),
  id: z.string(),
  permissions: z.array(z.string()).nullable(),
  role_name: z.string().nullable(),
});

export const groupRolesInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  permissions: z.array(z.string()).optional().nullable(),
  role_name: z.string().optional().nullable(),
});

export const groupRolesUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  permissions: z.array(z.string()).optional().nullable(),
  role_name: z.string().optional().nullable(),
});

export const groupRolesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_group_roles_group_id_fkey"),
    columns: z.tuple([z.literal("group_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const groupUsersRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string().nullable(),
  group_id: z.string().nullable(),
  id: z.string(),
  user_id: z.string().nullable(),
});

export const groupUsersInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const groupUsersUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const groupUsersRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_group_users_group_id_fkey"),
    columns: z.tuple([z.literal("group_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("group"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_group_users_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const profilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  first_name: z.string().nullable(),
  id: z.string(),
  last_name: z.string().nullable(),
  updated_at: z.string().nullable(),
  username: z.string().nullable(),
});

export const profilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  first_name: z.string().optional().nullable(),
  id: z.string(),
  last_name: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const profilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  first_name: z.string().optional().nullable(),
  id: z.string().optional(),
  last_name: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
});

export const profilesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("profiles_id_fkey"),
    columns: z.tuple([z.literal("id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const appPermissionSchema = z.union([
  z.literal("group.edit"),
  z.literal("group.delete"),
  z.literal("group.members.invite"),
  z.literal("group.members.approve"),
]);

export const rolePermissionsInsertSchema = z.object({
  id: z.number().optional(),
  permission: appPermissionSchema,
  role_id: z.string(),
});

export const rolePermissionsUpdateSchema = z.object({
  id: z.number().optional(),
  permission: appPermissionSchema.optional(),
  role_id: z.string().optional(),
});

export const rolePermissionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_role_permissions_role_id_fkey"),
    columns: z.tuple([z.literal("role_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group_roles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const userRolesRowSchema = z.object({
  created_at: z.string(),
  group_role_id: z.string(),
  id: z.string(),
  user_id: z.string(),
});

export const userRolesInsertSchema = z.object({
  created_at: z.string().optional(),
  group_role_id: z.string(),
  id: z.string().optional(),
  user_id: z.string(),
});

export const userRolesUpdateSchema = z.object({
  created_at: z.string().optional(),
  group_role_id: z.string().optional(),
  id: z.string().optional(),
  user_id: z.string().optional(),
});

export const userRolesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("public_user_roles_group_role_id_fkey"),
    columns: z.tuple([z.literal("group_role_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("group_roles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("public_user_roles_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const rolePermissionsRowSchema = z.object({
  id: z.number(),
  permission: appPermissionSchema,
  role_id: z.string(),
});
